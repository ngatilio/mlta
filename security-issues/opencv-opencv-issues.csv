url,title,comments,state,created_at,closed_at
https://api.github.com/repos/opencv/opencv/issues/21326,b'OpenEXR vulnerabilities',"[b'Why is it so hard to put text information **as text**? Text screenshots are ridiculous.\r\nDo you understand that this blocks searching?', b'> Why is it so hard to put text information **as text**? Text screenshots are ridiculous. Do you understand that this blocks searching?\r\n\r\nSorry for that.\r\naccording to http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=openexr\r\n```\r\nCVE-2021-23169\r\nCVE-2021-3479\r\nCVE-2020-15306\r\nCVE-2020-15304\r\nCVE-2020-11758\r\nCVE-2021-3605\r\nCVE-2021-23215\r\nCVE-2020-15305\r\nCVE-2020-11760\r\nCVE-2020-11765\r\n```\r\n', b'Thank you! Updated the initial post.', b'Also openjpeg v2.4.0 you bundled has a Vulnerability which is  CVE-2021-29338.\r\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29338 @alalek ', b'> CVE-2021-29338\r\n> This occurs when the attacker uses the command line option ""-ImgDir"" on a directory that contains 1048576 files.\r\n\r\nProbably not applicable to OpenCV. We don\'t use OpenJPEG tools or apps. OpenCV uses decoder/encoder API subset only.\r\n\r\nAlso there are no new releases yet: https://github.com/uclouvain/openjpeg/releases', b'> > CVE-2021-29338\r\n> > This occurs when the attacker uses the command line option ""-ImgDir"" on a directory that contains 1048576 files.\r\n> \r\n> Probably not applicable to OpenCV. We don\'t use OpenJPEG tools or apps. OpenCV uses decoder/encoder API subset only.\r\n> \r\n> Also there are no new releases yet: https://github.com/uclouvain/openjpeg/releases\r\n\r\nI think so.  You\'d better have an eye on it.', b""I have prepared PR #21327 which disables bundled-in OpenEXR in runtime with link on this issue. So lets keep OpenEXR only problems in this issue.\r\n\r\nIf you have concerns about openjpeg please open another new issue. Initial analyzing shows that OpenCV is not affected by OpenJPEG issue, see the comment above. More analyzing requires more input/details (which we don't have)."", b'to fix openexr maybe you can update it to 3.x', b'New OpenEXR requires C++11, OpenCV 3.4 is C++98. So no upgrade is planned here.\r\nOpenEXR upgrade PR for OpenCV 4.x is here: #21324 (to be discussed after NY holidays).', b""Hi,\r\nI ran into this issue:\r\n![image](https://user-images.githubusercontent.com/13521689/148305911-4a97a6c7-09b4-4e4d-8b08-4c27228f0fc4.png)\r\n\r\nHence I wanted to bump this issue and ask if there's any solution (like downgrading openCV to solve this issue in the meantime)"", b'If you still need OpenEXR functionality and ensure that provided inputs are valid (from trusted sources) then you may turn off mentioned flag through environment variables (check internet how to use them).\r\n\r\nAny downgrading attempt is a security hole. Not recommended in general.\r\n\r\n---\r\n\r\nAvoid posting text information through screenshots in internet. It is ridiculous.', b""@alalek Wouldn't merging #21324 help fix the security issues?"", b""@alalek Hi. I'm having a same problem as fschiffers, currently using opencv 4.5.5. I'd be really grateful if you tell me more specific ways how to fix this problem using environment variables. I've tried following instructions from the error message which was using export OPENCV_IO_ENABLE_OPENEXR = true or alternatively by os.environ ~ = 'true' but didn't work. Thanks"", b'@skt0725 \r\n\r\nBoth \r\n\r\n```\r\nOPENCV_IO_ENABLE_OPENEXR=1 python my_script.py\r\n```\r\n\r\nOr using `os` **before** importing `cv2` works\r\n\r\n```python\r\nos.environ[""OPENCV_IO_ENABLE_OPENEXR""]=""1""\r\n```']",open,2021-12-23 08:48:54,
https://api.github.com/repos/opencv/opencv/issues/16951,b'null-pointer-dereference and buffer overflow: OpenCV 3.4',"[b'I believe these patches are not applicable to _3.4_ because _master_ branch has completely new parser implementation (#13011). Have you been able to reproduce any of these issues?', b'I have not yet attempted reproducing these issues, but that pull request you referenced shows that the code around https://github.com/opencv/opencv/blob/3.4/modules/core/src/persistence_xml.cpp#L409 in 3.4 just got moved to https://github.com/opencv/opencv/blob/master/modules/core/src/persistence_xml.cpp#L631 in master. And then there is a length check that has been added to that code in master, but not in 3.4', b'#15127 \r\n\r\nOpenCV 3.4 raises an exception using provided reproducer:\r\n\r\n> modules/core/src/persistence_c.cpp:552: error: (-204:Requested object was not found) Could not find the/an object in file storage in function \'cvLoad\'\r\n\r\nIt is normal expected behavior.\r\n\r\n---\r\n\r\n#15868\r\n\r\n> OpenCV 3.4.8 is not affected by mentioned problems.\r\n\r\nSee https://github.com/opencv/opencv/issues/15857#issuecomment-551018843\r\n\r\nRegular C++ exceptions are raised on passed reproducer data. The same status is for latest code from 3.4 branch.\r\n\r\n> modules/core/src/persistence_xml.cpp:90: error: (-212:Parsing error) icvXMLSkipSpaces in function \'i15857/poc.xml(0): Too long string or a last string w/o newline\'\r\n\r\nand\r\n\r\n> modules/core/src/persistence_json.cpp:321: error: (-212:Parsing error) icvJSONParseValue in function \'i15857/poc.json(0): \'""\' - right-quote of string is missing\'\r\n\r\n---\r\n\r\nSo there is no **real** problem yet.\r\nFixes may be partially applicable onto 3.4 branch. Feel free to propose patch for that.\r\n\r\nPriority => low, until we have confirmation (reproducer) of invalid behavior.', b'Sure, I may propose the patch this weekend. I too, when attempting to reproduce using OpenCV 3.4.9 had the exceptions']",open,2020-04-02 04:40:24,
https://api.github.com/repos/opencv/opencv/issues/14145,b'New JasPer release fixing CVEs',[b'Link to related issue: #14058'],open,2019-03-25 15:16:32,
https://api.github.com/repos/opencv/opencv/issues/20599,b'Upgrade OpenEXR version',[],open,2021-08-24 14:57:29,
https://api.github.com/repos/opencv/opencv/issues/17373,b'Vulnerability in FFmpeg 4.2.2',"[b""Thank you for the notice!\r\n\r\n> cbs_jpeg_split_fragment in libavcodec/cbs_jpeg.c in FFmpeg 4.2.2 has a heap-based buffer\r\n\r\nCurrent `opencv_ffmpeg*.dll` binaries are not affected by mentioned issue due build configuration flags.\r\n\r\nWe have this `config.h` content from x86/x86_64 builds:\r\n```\r\n#define CONFIG_CBS_JPEG 0\r\n```\r\n\r\n`cbs_jpeg.c` is excluded from compilation (no `cbs_jpeg.o` file in build folder).\r\n\r\nBuild process can be checked through build from this [source three](https://github.com/opencv/opencv_3rdparty/tree/ffmpeg/master) and using `BUILD_SKIP_OPENCV_UPDATE=1` environment variable (Docker is required).\r\n\r\nOpenCV team doesn't distribute FFmpeg in other forms than mentioned above (no FFmpeg in iOS or Android packages from release page, also we don't maintain Linux packages).\r\n\r\nMaintainers of other packaging systems should update in their way (usually through updating FFmpeg itself and rebuilding).\r\n\r\n---\r\n\r\nSo urgent upgrade of FFmpeg wrapper in OpenCV is not required.\r\nWe will update FFmpeg dependency on regular basic (few weeks before release)."", b'Thank you for investigating the issue and providing this informative response!\r\n\r\nTo simplify these kinds of issue investigations in the future, might it be worthwhile to put a copy of `config.h` (and/or other configuration products/logs) under version control alongside the DLLs?  This way, people could easily inspect the configuration without needing Docker and without needing to re-run the configuration/build script.']",closed,2020-05-25 16:17:12,2021-12-05 19:20:37
https://api.github.com/repos/opencv/opencv/issues/21324,b'Improve OpenEXR support',"[b'> > `+122,989` lines\r\n> \r\n> To be discussed.\r\n\r\nWe are talking about including the generated lookup tables:\r\n* [`b44ExpLogTable.h`](https://raw.githubusercontent.com/opencv/opencv/50804711f743ad48365d9a0c505572f85f477a14/3rdparty/openexr/IlmImf/b44ExpLogTable.h)\r\n* [`dwaLookups.h`](https://raw.githubusercontent.com/opencv/opencv/50804711f743ad48365d9a0c505572f85f477a14/3rdparty/openexr/IlmImf/dwaLookups.h\r\n)\r\n\r\nI guess these could also be generated as part of the build.', b""As far as I'm concerned, I'm now done with this PR.\r\n\r\nThere's still this [patch size warning](https://pullrequest.opencv.org/buildbot/builders/precommit_docs/builds/33573/steps/patch%20size%20opencv/logs/stdio), but I'm not sure if there is something I should (or can) do about it?""]",open,2021-12-23 06:05:28,
https://api.github.com/repos/opencv/opencv/issues/20239,b'How to confirm the  issue CVE-2019-9423 is fixed or not\xef\xbc\x9f',"[b'There is no detail provided from mentioned link or through https://github.com/opencv/opencv/blob/master/SECURITY.md\r\n\r\n@vrabaud Do you have any information about this record?', b'> There is no detail provided from mentioned link or through https://github.com/opencv/opencv/blob/master/SECURITY.md\r\n> \r\n> @vrabaud Do you have any information about this record?\r\nThere is no detail to provide\xef\xbc\x8cbecause of currently there is no corresponding problem to reproduce. But this is a potential risk for our project. \r\n', b""If you don't use imread/imdecode calls from unknown external sources (or don't use whole imgcodecs module), then you don't have any risk.\r\n\r\nRisk estimation without any details is tricky."", b""My Doubt:\n     In an RNN,lets take an input data as\n[[2,3,4],[2,4,6],[5,6,8],[3,6,8]\n[3,5,7],[1,2,4],[5,7,8],[75,4,]\n[4,4,6],[0,6,0],[2,5,3],[2,2,2]\n[1,1,1],[4,8,0],[2,4,3],[6,4,0]\n[3,5,7],[1,2,4],[5,7,8],[75,4,]]\n\nThis is a 3D array of shape (5,4,3).Am I right?\nMy question is\nHow is this input data processed in a RNN?\nHow the dimension of the weight matrix(between input and hidden neuron) is\ndetermined?\nHow the dimension of the another weight matrix(between hidden neuron and\nprevious hidden state) is determined?\nHow does the input data undergo computation?\n\nI know the equations.\n\ns(t) = tanh[Ux + Ws(t-1)]\ny(t) = softmax[Vs(t)]\n\nI need to know how the matrix is multiplied and the bias is added?\nI don't know how to determine the shape of the bias and other weight\nvectors(U,V,W).\nI need to know the computation in detail.\n\nYou can suggest some related articles to read.\n\n\nThank you\n\nOn Tue, Jun 8, 2021, 2:20 PM Alexander Alekhin ***@***.***>\nwrote:\n\n> If you don't use imread/imdecode calls from unknown external sources (or\n> don't use whole imgcodecs module), then you don't have any risk.\n>\n> Risk estimation without any details is tricky.\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/opencv/opencv/issues/20239#issuecomment-856584961>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ARKUEDDJTJLSKMI3KACOXL3TRXKWBANCNFSM46JGBYJQ>\n> .\n>\n"", b""> If you don't use imread/imdecode calls from unknown external sources (or don't use whole imgcodecs module), then you don't have any risk.\r\n> \r\n> Risk estimation without any details is tricky.\r\n\r\nDoes anyone else who can help answer this issue, Is there a commit for this security issue?\r\n\r\n""]",closed,2021-06-08 06:45:30,2021-10-04 00:30:17
https://api.github.com/repos/opencv/opencv/issues/8511,b'export img decoders/encoders',"[b""+ added string description to each decoder so that the caller can decide if they don't want to touch the header once the magic bytes have been read. for example, tiffs are quite prone to CVEs, so we might not want to touch them at all."", b'This patch resolves #8605 and #8606 ', b'1) \r\nNew OpenCV public API should not contain complex classes with ""virtual"" methods. This is needed to avoid ABI (application binary interface) violations and producing hacks like [this](https://github.com/opencv/opencv/pull/6825/files#diff-62622f16a47251bd0c0f757f04da7ab0R221) - just want to add new method.\r\n\r\nPlease follow ""pImpl design pattern"" instead. Example: [`ocl::Device`](https://github.com/opencv/opencv/blob/3.2.0/modules/core/include/opencv2/core/ocl.hpp#L70)\r\nYou would still have these ""virtual classes"", but they will go into the private scope (into some .hpp file from src folder: without exposing them public) - probably you should just reuse existed `BaseImageEncoder` as ""internal"" implementation.\r\n\r\n2)\r\nPlease avoid(or minimize) using of STL objects in interfaces (std::vector/std::map/std::string/etc) - this may raise ABI problems which is very hard to debug (especially for newbie C++ developers): #6198 #5227 #6165', b'@alalek \xf0\x9f\x91\x8d Good stuff. I think I thought I was accomplishing the pimpl pattern by making the virtual base class and returning `Ptr` but this makes a lot more sense. Will make those changes soon.', b""@alalek What would you think about leaving ImageEncoder's write params arg as `const std::vector<int>& params`? `imencode` already takes this and it seems like it would make the most sense to have parity with that function, since the argument types are the same.\r\n\r\nActually, for that matter, imencode also uses `std::vector<uchar>& buf` for its output. So to do that with ImageEncoder here would match imencode as well.\r\n\r\nAs far as I can tell those are the only places in this patch where STL types are exposed in the ABI."", b'Probably we can try to use InputArray wrapper instead of ""std::vector<int>& params"" (the latest changes support C++ `std::array<>` argument type).\r\n\r\n\r\n> void setDestination( std::vector<uchar>& buf )\r\n\r\nI believe `Mat&` (of 8UC1) should work in this case too.', b""@alalek is it possible to run the tests locally? i tried pulling down the sample data but i wasn't really sure where it needs to go or how to invoke it, so i'm dependent on the tester here to check for now :("", b'@alalek Ok, nevermind, I put together a small test program.', b""@alalek So this passes the tests, but I'm not so good at opencv-fu, and I needed to allocate a new Mat and then copy that Mat back to the destination vector in `imencode` once the encode finished. This is the only way I know of to maintain the backwards compat here with `std::vector`.\r\n\r\nIs there a way around that that we can avoid? I have briefly tried using OutputArray but I'm not really sure how to do the operations I need to on it, including when it's of type `std::vector`"", b""@alalek I folded https://github.com/opencv/opencv/pull/8547 into this patch - it wasn't a huge change, just exported the Exif stuff on top of Decoder/Encoder. It's now part of the JPEGDecoder"", b'@brian-armstrong-discord There is some conflicts with master branch. Please rebase this patch to actual master branch.\r\n\r\nSomething like these:\r\n- https://help.github.com/articles/configuring-a-remote-for-a-fork/\r\n- `git fetch upstream master`\r\n- `git rebase -i upstream/master`\r\n- on conflict: resolve conflict and run `git add <conflict file>` and then `git rebase --continue`. Repeat\r\n- `git push -f origin <branch name>` (`-f` means force)\r\n\r\nBTW, We prefer to have patches with single commit to eliminate intermediate ""fixup"" commits from git history. Sometimes it is better to squash your commits before rebase to upstream code (`git rebase -i HEAD~11` (11 is number of commits); ""pick"" the first commit, ""f"" or ""s"" - others)\r\n\r\nRebased branch for reference:\r\n- https://github.com/alalek/opencv/tree/pr8511_r (rebased)\r\n- https://github.com/alalek/opencv/tree/pr8511_rs (squashed & rebased)', b'@alalek Looks like the conflicts are gone now', b'Hi @alalek \r\n\r\nHave you had a chance to look at this recently?', b""Hi @brian-armstrong-discord !\r\nI'm sorry for huge delay. I need more time to review this (to test some suggestions on public interfaces)."", b""@alalek @brian-armstrong-discord I also found the idea -to get the header data- very promising. If one might ask, what's the state so far? \r\n\r\nP.S. It doesn't seem like you need some help, but if you are - feel free to text me :)\r\nP.P.S. \r\n\r\n- The stated patch intention is to provide, say, lazy evaluation for image processing. But to do so the export whole bunch of ImageEncoders/Decoders is seen as little redundand (4 me ofc) - e.g. we could have added just +1 method imreadheader() or like so. (as C-like interface extension)\r\n- I wonder shall or shall not Encoders be visible with only simmetric (AFAIK) reasoning\r\n- I have some concerns about imageDescription(). As for me, the downside is the case -what if I want to know, what the exact format of the image?-. Should I compare the strings? Or shall we introduce an enum instead?\r\n- Also, it seems, ctors like Decoder(const Decoder& oth, Ptr<Decoder::Impl>) could be avoided."", b'Hi @alalek \r\n\r\nAny updates in this PR? I would love to put this work behind me finally :)\r\n\r\nAnecdotally, this patch is working well in production. I know you will likely have some more requests on the interface of it, though.', b""@Turim an imreadheader would, among other issues, force us to re-read the header bytes when we go to decode. it also opens the possibility of imread() and imreadheader() doing different things. this would be a brittle approach to the solution.\r\n\r\ni'm open to using enums, but internally opencv uses strings, and it made sense to me to make this change as lightweight as possible."", b""@brian-armstrong-discord ,\r\nFrankly speaking, I didn't see here strong reasoning against. \r\n- Yup, re-read() is possible. Ok, we could live even with that or provide within imreadheader() an out param, which could be used to read the image but header.\r\n- About possibilities. A strange argument, as for me, coz we could have had tests for the case. Besides, we could implement imread() via imreadheader() and that's it, isn't it?\r\n\r\n>i'm open to using enums, but internally opencv uses strings, and it made sense to me to make this change as lightweight as possible.\r\n\r\nCan I ask you to be more specific? In competition 'enum vs strings' where's the pros of the string usage?\r\n(Say, at present to the question -Which format does the image have?- I see the overhead in terms of string comparisons and have no clue -how to avoid it-)."", b""@Turim You're more than welcome to try whatever you think will work well. I'd like to stick with the approach that's in this PR because the Decoder and Encoder classes do the same work that was being done before and offer the user a relatively clean interface."", b""@alalek Do you think there's any hope for this PR? I'm wondering where I should set my expectations."", b'i want to share my humble thoughts about this PR\r\ni completely agree that there should be a function or class giving image information only reading file header.\r\nwhen adding this functionality we also should keep in mind some related improvements\r\n1.catching  internal errors while loading images (see https://github.com/opencv/opencv/pull/3314)\r\n2.when saving an image keeping EXIF information or adding new EXIF tags\r\n\r\npersonally i think a new class using existing decoders and encoders internally  can be a good candidate to the solution', b'https://blog.discordapp.com/how-discord-resizes-150-million-images-every-day-with-go-and-c-c9e98731c65d', b'Sorry for huge delay!\r\n\r\nCurrent interface is very questionable (for example, `setScale()`, `orientation()` and `nextPage()` methods). Such interfaces should be polished accurately:\r\n- minimal ""required"" set of parameters.\r\n- easily extendable interface\r\n- usability (construct image decoder, call readHeader(), check result and then maybe get image size via width and height - this long story we should to hide from users)\r\n\r\nPerhaps, we could start with simple set of functions, for example:\r\n```\r\n/** Query image parameters\r\n\r\n@sa cv::imread\r\n\r\nThrows exception if image is not supported.\r\n\r\n@param filename Name of file to be loaded\r\n@param flags Flag that can take values of cv::ImreadModes\r\n@param[out] type (optional) type of decoded cv::Mat returned by cv::imtead\r\n@param[out] decoderName (optional) name of used image decoder for cv::imread\r\n@returns size of image\r\n*/\r\nSize imquery(const cv::String& filename, int flags = IMREAD_COLOR,\r\n                CV_OUT int* type = NULL, CV_OUT cv::String* decoderName = NULL);\r\n```\r\n\r\nI believe it is able to handle declared set of problems from the PR description.', b""@alalek , IMHO\r\n\r\n- nextPage() can't be ignored as just redundand for nowadays we're able to handle multipage TIFF images;\r\n- I hope imageHeader/width and imageHeader/height still can be a subject for a discussion;\r\n\r\nI think the case could be mantained for the imgcodecs to be more clean. Nowadays the only what a imgcodecs' user can is try to load the image via, say, imread and check the retval. But in the prod code it's just sort of gambling with user's memory (i.e. working set) - every try to load image, say, 10000x10000 or even bigger leads to a memory consumption peak with empty retval.\r\n\r\nAm I right that you prefer not to add struct/classes?\r\nThe another way to mantain the case could be code like that:\r\n```\r\n/**\r\n@param filename Name of file to be loaded\r\n@param flags Flag that can take values of cv::ImreadModes\r\n@param[out] type (optional) type of decoded cv::Mat returned by cv::imread\r\n@param[out] width (optional) width of decoded cv::Mat returned by cv::imread\r\n@param[out] height (optional) width of decoded cv::Mat returned by cv::imread\r\n*/\r\nCV_EXPORTS_W bool imreadheader(const String& filename, int flags, \r\n                                CV_OUT int* type = NULL, CV_OUT int* width = NULL, CV_OUT int* height = NULL);\r\n\r\n/**\r\n^like the previous\r\n*/\r\nstruct ImageSize // or pair_of_int or tuple_of_int\r\n{\r\nint width;\r\nint height;\r\n};\r\nCV_EXPORTS_W bool imreadheadermulti(const String& filename, int flags, \r\n                                CV_OUT int* type = NULL, CV_OUT std::vector<ImageSize>* sizes = NULL);\r\n```\r\n\r\nAs for mentioned imquery() - yes, it gives you the option to distinguish JPEG from TIFF, but the image size is an open question still - so you basically don't know if there any way to load it.\r\n\r\nP.S. @brian-armstrong-discord I apologize for I've just mentioned yet another interface for the case. Quite unsure should I create a separate discussion for that. Feel free to provide the feedback on that.\r\nP.P.S. About 'to throw or not to throw' - I'm pretty unsure that it has any connection to the iface. To enable throwing means just to break the backward compatibility and previously written error handling. \r\nP.P.P.S. Yup, both imreadheader() and imquery() aren't so good regarding the perf - on imread() you eventually reread the header. I think we can't fix that without classes/output_token_parameters which could use the state. But even with current perf restrictions, it's good just to have functions like those in the imgcodecs interface."", b'> but the image size is an open question still\r\n\r\nIn case of `imquery` proposal - size is return value of mentioned function.\r\n\r\n> multipage TIFF\r\n\r\nI prefer to handle the most universal cases and I prefer not to add some rarely used hacks (like `setScale()` or `readNext()`) into widely used interfaces.\r\nImage is a single surface of pixels (check ""wiki""-like definitions).\r\nIf you want to work with multipage images - welcome to VideoCapture interface, which is initially designed to handle set of images, including cases of different frames resolutions.\r\n\r\n> Throw\r\n\r\nCheck amount of useful information between ""bool"" result and ""exception"" with message and potentially stack-trace to the reason of problem.', b""@alalek , thanks for clarifying.\r\n> size as the retval\r\n\r\nYou're correct, my mistake.\r\n\r\n>I prefer not to add some rarely used hacks\r\n\r\nAFAIK imreadmulti() supports it and, I presume, it's the only goal.\r\nSo we're able to read multiple images, but can get the Size only for the 1st - I presume - the more clean would be to add imquerymulti() or to deprecate imreadmulti().\r\n\r\n"", b""Should I go ahead and just abandon this? The `imquery` approach isn't very appetizing, and if this isn't mergeable, we might as well kill it."", b""Are there any plans to add something like imquery? We'd love to get off this fork, especially now that opencv has changed substantially."", b'jenkins cn please retry a build']",open,2017-04-03 22:17:03,
https://api.github.com/repos/opencv/opencv/issues/19878,b'Fixed Vulnerabilities in Two libpng files ',"[b'These patches are against 1.6.31+\r\nCurrent code is based on libpng 1.6.37\r\n\r\nRefer to the content of the latest libpng release: https://github.com/glennrp/libpng/tree/v1.6.37\r\nThere are no such workarounds anymore, probably they are mitigated through different ways.']",closed,2021-04-08 19:21:19,2021-04-15 20:15:07
https://api.github.com/repos/opencv/opencv/issues/18618,b'Opencv 3.4.1 3rdparty file',"[b'> 3.4.1\r\n\r\nThis is outdated version with outdated 3rdparty libraries (probably with CVEs).\r\n1. Upgrade to the latest version first. It is better to avoid 3.4.x releases in new projects due to ancient Android NDK r10 dependency.\r\n2. Almost all 3rdparty libraries are optional (but disable some functionality of OpenCV library)\r\n3. Check getBuildInformation() / CMake output for exact versions. Also check [Android pack](http://pullrequest.opencv.org/buildbot/builders/master_pack-android) builder logs.\r\n4. If version is missing in CMake output, then you can check git history comments for related components in 3rdparty directory.\r\n5. You may want to tune [these build scripts](https://github.com/opencv/opencv/tree/master/platforms/android) for your needs.', b'Hi Thanks for the information. But we are not directly using the opencv in our project. One of SDK in our project uses opencv version 3.4.1. \r\nSo we want to make sure whether the 16 dependencies in ""3rdparty"" folder are used by opencv or not. These 16 are ,\r\ncarotene, cpufeatures, ffmpeg, include, ippicv, ittnotify, libjasper, libjpeg, libpng, libtiff, libwebp, openexr, openvx, protobuf, tbb and zlib. Can you please confirm whether these are optional or not? . we are unable to find it in SDK since its a binary. Thanking in advance.', b'> These 16 are\r\n> ""include""\r\n\r\nPlease check binaries in `sdk/native/3rdparty` from SDK package instead of source directory. Most part of these sources are not used in default Android builds.\r\n\r\n- `carotene` - released as part of OpenCV (ARM CPU optimizations), optional\r\n- `cpufeatures` - upstream code is located in Android SDK (from Google)', b'@akshayrb9 , all these dependencies ar optional except maybe _zlib_ and _cpufeatures_. But most of them are enabled by default, especially on Android. Some dependencies will be enabled only on specific platforms, e.g. _carotene_ on ARM or _ippicv_ on x86_64. \r\nSo you should consult with your OpenCV SDK provider - actual configuration depends on options used for the build. See also: https://docs.opencv.org/master/db/d05/tutorial_config_reference.html', b'Hi, For documentation purpose and release process i need the Export control classification number(ECCN) for these if applies.\r\nCan anyone please let me know the ECCN ?', b'https://github.com/opencv/opencv/issues/16402#issuecomment-577069572 (disclaimer: do not rely on legal information from Internet, contact your legal department)', b'Yes this 3rdparty folder with own licences is very annoying.\r\nWould be nice to get these dependencies directly from they repositories or at list move to some separate repository.']",closed,2020-10-19 04:34:56,2020-11-02 17:18:23
https://api.github.com/repos/opencv/opencv/issues/10998,b'assertion failure  cause a denial of service ',"[b'> CVE-2018-7712\r\n> CVE-2018-7713\r\n> CVE-2018-7714\r\n\r\nDetails: https://www.cvedetails.com/cve/CVE-2018-7712/ , etc\r\nOpenCV `CV_Assert` is not an assertion (C-like `assert()`), it is regular C++ exception which can raised in case of invalid or non-supported parameters.\r\nConsidering this as invalid report: It is application developer responsibility to catch C++ errors from C++ libraries.\r\n\r\nThese exceptions are raised in case of malformed images or to avoid loading of very huge images (to resolve unwanted denial of service related to memory limits).\r\nThere is no runtime way at this moment to control values of these limits, but these limits are enough for usual modern applications.', b'JFTR, the corresponding CVEs were disputed accordingly:\r\n\r\n https://nvd.nist.gov/vuln/detail/CVE-2018-7712\r\n https://nvd.nist.gov/vuln/detail/CVE-2018-7713\r\n https://nvd.nist.gov/vuln/detail/CVE-2018-7714']",closed,2018-03-06 06:20:03,2018-04-17 01:41:23
https://api.github.com/repos/opencv/opencv/issues/15481,b'OOB: cv::WorkerThread::WorkerThread()',"[b'https://nvd.nist.gov/vuln/detail/CVE-2019-16249', b'> fuzzing the opencv_test_video\r\n\r\nThere is no fuzzing in regular OpenCV tests, so there is no special reproducer input data.\r\n\r\nOnly address sanitizer is working.\r\nOne of failed test is:\r\n- DenseOpticalFlow_DIS.InvalidImgSize_CoarsestLevelLessThanFinestLevel']",closed,2019-09-07 15:52:32,2019-09-17 15:01:51
https://api.github.com/repos/opencv/opencv/issues/15258,"b'opencv versions impacted due to issue 15127, 15124 and 15125'","[b'There is a conflict between the versions mentioned in the git hub issues and the NVD NIST database.\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2019-14491\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2019-14492\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2019-14493', b'Assume all releases before committed fix are impacted. There are no plans to re-check all released versions (no resources for that).\r\nOld previous versions are outdated by definition.\r\n\r\n> the versions mentioned in the git hub issues\r\n\r\nIt is milestone, single value only (not designed to track multiple versions).\r\nContains the first minimal version with the fix -> get date of the release -> find other releases.', b'Thanks']",closed,2019-08-08 07:21:26,2019-08-09 07:14:17
https://api.github.com/repos/opencv/opencv/issues/15287,b'Floating Point Exception in cv::HOGDescriptor::getDescriptorSize()',[b'This was assigned [CVE-2019-15939.](https://nvd.nist.gov/vuln/detail/CVE-2019-15939)'],closed,2019-08-13 07:02:59,2019-08-23 19:01:56
https://api.github.com/repos/opencv/opencv/issues/5849,b'Application crashed when imdecode() is called for .jp2 image',"[b""OpenCV uses Jasper library to decode JPEG2000 images, but it fails by `assert` on this line: https://github.com/Itseez/opencv/blob/81f826db2b3945854a87cf7ceb1b2244103dbed9/3rdparty/libjasper/jas_image.c#L1387\n\nBTW, I can't open this image in GIMP (error message). What library do you use to create this image?\n"", b""Thanks for reply.\n\nDebugging our application indeed points to this assertion.\nQ1. Should this happen in release mode? AFAIK, asserts should be dis-included in release mode?\nQ2 Even though we are trying to catch any exception when using imdecode() there is no exception raised.\nQ3 Can you help me on what should be done from my side so that this gets fixed?\n\nI haven't created this image, this image was sent to us with crash report from our customer.\nwe reproduced the issue with several other images, but not with all jp2 images. So far we were not able to distinguish bad from good jp2 image. Only difference so far was operating system on which they are created - Mac vs Windows.\n"", b'1) You are right, `assert` should gone in the release mode but crash can happen a few lines below where unexpected j value is used.\n2) Jasper library is ""C"", there is no chance to use C++ exceptions.\n3) Are you able to open this file by some program? What program/tool/library is used?\n\nI tried OpenCV with system jasper library, but this doesn\'t help.\n\n```\ndnf info jasper-libs\nInstalled Packages\nName        : jasper-libs\nArch        : x86_64\nEpoch       : 0\nVersion     : 1.900.1\nRelease     : 31.fc23\nSize        : 337 k\n\n(gdb) bt\n#0  0x00007ffff0798a98 in raise () at /lib64/libc.so.6\n#1  0x00007ffff079a69a in abort () at /lib64/libc.so.6\n#2  0x00007ffff0791227 in __assert_fail_base () at /lib64/libc.so.6\n#3  0x00007ffff07912d2 in  () at /lib64/libc.so.6\n#4  0x00007ffff6ae9f5f in jas_image_chclrspc () at /lib64/libjasper.so.1\n#5  0x00000000005451d4 in cv::Jpeg2KDecoder::readData(cv::Mat&) ()\n```\n\nBTW, There is [OpenJPEG library](http://www.openjpeg.org/) for JPEG2000 images, but OpenCV doesn\'t support OpenJPEG at this moment. Also there is no guarantee that image can be read by this library.\n', b'Hi,\n\nI used several tools, programs to open this file - Free File Viewer, Honey View, jpylyzer etc.\n(One note, for example Free File Viewer shows this image as Gray, and Honey View as RGB)\nWe used few other tools to check on the image, but except that ""bad"" images are created on Mac, we didn\'t notice anything useful.\n\nThe input where we use imdecode() is raw data, any image type can be passed into. As far as I could see, imdecode() inside dynamically chooses decoder and correct - Jpeg2KDecoder is used. Not sure how much we can influence that, from our own code.\n', b'Jpeg2KDecoder backend is 3rdparty library called ""jasper"". And failure is there.\nSystem ""Jasper"" tools (""jasper-utils-1.900.1-31.fc23.x86_64"" package) fail on this image also:\n\n```\njiv example1.jp2\nICC Profile CS 52474220\njiv: jas_image.c:1394: jas_image_chclrspc: Assertion `j >= 0\' failed.\nAborted (core dumped)\n```\n\nI also tried OpenJPEG tools (openjpeg2-tools.x86_64 2.1.0-7.fc23) and they work fine:\n\n```\nopj2_decompress -i example1.jp2 -o test.bmp\n\n[INFO] Start to read j2k main header (691).\n[INFO] Main header has been correctly decoded.\n[INFO] No decoded area parameters, set the decoded area to the whole image\n[INFO] Header of tile 0 / 0 has been read.\n[INFO] Tile 1/1 has been decoded.\n[INFO] Image data has been updated with tile 1.\n\n[INFO] Stream reached its end !\n[INFO] Generated Outfile test.bmp\n```\n\nBut OpenCV currently supports only Jasper as JPEG2000 backend.\n', b'Can you advise me on what would be procedure in this case?\nDo I need to report issue to jasper since even this gets fixed on jasper it should be integrated to openCV or no?\n\nThanks!\n', b'One additional thing I forgot to ask about assert where it fails:\n\nfor (i = 0; i < numinclrchans; ++i) {\n        j = jas_image_getcmptbytype(inimage, JAS_IMAGE_CT_COLOR(i));\n        assert(j >= 0);  // -- @skomaze this is failing assert --\n        if (!(incmptfmts[i].buf = malloc(width \\* sizeof(long))))\n            goto error;\n        incmptfmts[i].prec = jas_image_cmptprec(inimage, j);\n        incmptfmts[i].sgnd = jas_image_cmptsgnd(inimage, j);\n        incmptfmts[i].width = width;\n        incmptfmts[i].height = 1;\n    }\n\nYou mentioned that it can fail for the call below the assert - jas_image_cmptprec() is the only such place that uses ""j"", but our stack trace doesn\'t point to the function below but to jas_image_chclrspc(), so I am not sure how this can occur in release mode?\n', b'We prefer to update 3rdparty libraries from the upstream, with minimal set of ""inplace"" fixes.\nLooks like Jasper is not very active project at this moment (the latest version 1.900 has been released more than 8 years ago). Some security patches are got from the debian project. I tried the latest version of patches from [here](https://packages.debian.org/sid/libjasper-runtime) via ""jiv"" tool (without success, same message as above)\n\n`jas_image_cmptprec` is macro here, not a function. Also compiler can inline function calls.\n', b'Hi,\n\nI found almost the ""same"" issue reported already:\nhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=792226\n\nI followed the suggestion from this bug report and build in the changes in my project. Initial tests seems to do prevent the crash and I think this could be considered as a valid workaround.\n\nBut, I don\'t think this is complete fix since now we will have some working and some non-working .jp2 images. And we still don\'t know what in this non-working images causing jasper and that way openCV as well to be unable to display this images.\n\nSince jasper is inactive project, what are the chances that OpenCV starts supporting some other JPEG2000 backend instead of jasper and implements this in some newer OpenCV release?\nOr any additional suggestions on how should I continue with this opened issue?\n\nThanks and regards!\n', b'Could this help as a workaround example before the integration of OpenJPEG as a replacement for Jasper?\r\nhttps://github.com/Pandinosaurus/OpenJPEGxOpenCV', b'Is there any news/plans to port opencv from jasper to openjpeg?', b""I'd also like to know if there are any plans to replace jasper which seems at this point unmaintained, open CVEs for a while now."", b'I have started implementing an OpenJPEG based JPEG2000 decoder, see\r\nhttps://github.com/StefanBruens/opencv/tree/jpeg2000_openjpeg_port\r\n\r\nFeedback welcome.']",closed,2015-12-21 13:23:45,2020-03-27 07:18:59
https://api.github.com/repos/opencv/opencv/issues/10369,b'imgcodecs(pxm): fix memcpy size',"[b':+1:', b'CVE-2017-17760 issue. any plan for backporting into 2.4?']",closed,2017-12-21 01:12:24,2017-12-21 18:52:29
https://api.github.com/repos/opencv/opencv/issues/10563,"b'imgcodecs: replace assert() calls, add overflow checks'","[b'Hi, this was about CVE-2018-5269. Will the backport to 2.4 also be needed?']",closed,2018-01-09 13:00:04,2018-01-10 10:19:18
https://api.github.com/repos/opencv/opencv/issues/9902,b'Out of bounds write causes Segmentation Fault ',"[b'Does this have a cve id @carnil', b""@KSHK: none that I'm aware of, but that would be need to be double-checked against the MITRE master list from http://cve.mitre.org/""]",closed,2017-10-21 19:19:49,2017-10-30 17:59:19
https://api.github.com/repos/opencv/opencv/issues/10566,b'imgcodecs: add more Jasper checks for supported and tested cases',"[b'Hi, this was about resolving CVE-2018-5268 and merged into the master.\r\nDoes it need to be backported into 2.4 as well?']",closed,2018-01-09 14:41:14,2018-01-10 10:19:47
https://api.github.com/repos/opencv/opencv/issues/10524,b'Please release one security release for version 3.4.0 ',[],closed,2018-01-05 16:52:01,2018-02-25 16:58:53
https://api.github.com/repos/opencv/opencv/issues/10540,b'Assertion failure happens in bitstrm.cpp because of an incorrect integer cast',[b'This issue was assigned [CVE-2018-5269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-5269)'],closed,2018-01-07 12:58:35,2018-01-10 10:19:18
https://api.github.com/repos/opencv/opencv/issues/10541,b'A heap based buffer overflow happens in cv::Jpeg2KDecoder::readComponent8u',[b'This issue has been assigned [CVE-2018-5268](https://github.com/opencv/opencv/issues/10541)'],closed,2018-01-07 13:02:37,2018-01-10 10:19:47
https://api.github.com/repos/opencv/opencv/issues/10479,b'Buffer overflow in cv::HdrDecoder::checkSignature',[b'This issue was assigned [CVE-2017-18009](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18009)'],closed,2018-01-01 03:37:50,2018-01-01 15:44:22
https://api.github.com/repos/opencv/opencv/issues/9723,b'Out of bounds write causes Segmentation Fault',[b'This issue was assigned CVE-2017-1000450'],closed,2017-09-26 22:19:03,2017-09-29 14:19:34
https://api.github.com/repos/opencv/opencv/issues/10351,b'Buffer overflow in grfmt_pxm.cpp::PxMDecoder::readData',[b'This issue was assigned [CVE-2017-17760](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17760)'],closed,2017-12-19 11:26:43,2017-12-21 18:52:29
https://api.github.com/repos/opencv/opencv/issues/5956,b'Remote code execution via heap corruption',"[b'Please, send the details to admin@opencv.org\n', b'Will do. For record keeping, the two vulnerabilities now have CVE-IDs:\nCVE-2016-1516\nCVE-2016-1517\n', b'Are there fixing commits available for those two issues?', b""hello! I've checked https://arxiv.org/pdf/1701.04739.pdf and https://www.flickr.com/photos/138669175@N07/albums/72157662415158985.\r\n\r\nCannot reproduce the problem. We need more clear specification on where the bug is"", b'@rstevens70 Any news on those?', b""@mshabunin Did you receive any actionable data on admin@opencv.org ?\r\n\r\n@rstevens70 Since you requested CVE, I think it's up to you to provide the required data/information so that @vpisarev is able to understand the issue and fix it. Can you at least share the reproducer files ?"", b""@rhertzog , yes we've received 3 sample files, in current version all three cases are handled correctly - an exception is raised. \r\n\r\nThis issue has been fixed in #9376 along with several others."", b'Could you release um bugfix release ? I see almost 10 CVE(s) [1]\r\n\r\n[1]\r\nhttps://github.com/opencv/opencv/issues?q=label%3A%22category%3A+vulnerability%22\r\n']",closed,2016-01-13 00:18:16,2017-09-07 14:52:25
https://api.github.com/repos/opencv/opencv/issues/9780,b'Please release one security release.',[],closed,2017-10-05 17:40:03,2017-10-31 20:49:10
https://api.github.com/repos/opencv/opencv/issues/9311,b'Two DOS bugs of opencv',[b'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12602\r\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12600\r\n'],closed,2017-08-04 10:12:30,2017-08-22 16:35:47
https://api.github.com/repos/opencv/opencv/issues/9309,b'Some bugs result to crashes when calling imread of opencv (include heap overflow and out of bound write)',[b'I think it should be taken a glance at. :)\r\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12597\r\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12598\r\n...'],closed,2017-08-04 09:29:14,2017-08-22 16:35:47
https://api.github.com/repos/opencv/opencv/issues/9448,b'imgcodecs: fix code problems with integer overflow / address arithmetic / UB',"[b':+1:', b'Hi,\r\nthis is related to CVE-2017-14136 and merged to mater only.\r\nDoes it need to be backported to 2.4? ( #9376 was backported as #9383 )']",closed,2017-08-23 12:35:06,2017-08-24 16:07:56
https://api.github.com/repos/opencv/opencv/issues/9443,b'out of bound write cause Segmentfault',[b'Please use CVE-2017-14136 for this issue.'],closed,2017-08-23 08:45:32,2017-08-24 16:07:56
https://api.github.com/repos/opencv/opencv/issues/9371,b'Integer overflow in PxMDecoder::readData',[b'got [CVE-2017-12863](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12863)'],closed,2017-08-15 06:18:34,2017-08-22 16:35:47
https://api.github.com/repos/opencv/opencv/issues/9370,b'AutoBuffer_heap_overflow in grfmt_pxm.cpp',[b'got [CVE-2017-12862](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12862)'],closed,2017-08-15 06:14:56,2017-08-22 16:35:47
https://api.github.com/repos/opencv/opencv/issues/9372,b'Integer overflow in ReadNumber',"[b'I suggest you to use github feature to \r\n1. [Link to the source code ](https://github.com/opencv/opencv/blob/3.3.0/modules/imgcodecs/src/grfmt_pxm.cpp#L81-L87) , not just writing it down\r\n2. Highlight the source code\r\n```cpp\r\ncv::imread(""2.ReadNumber_int_overflow_poc"");\r\n```\r\nand also\r\n\r\n3. Provide more specific compiler version\r\n   - probably the cmake version and also the cmake options you used.\r\n   - It\'ll help a **LOT** for the others much much more than you imagine.\r\n\r\nBTW, the number written in the file **is large**, so raising a run time error looks valid behavior to me.  What did you expect to see ?', b'Thanks for your suggestion! I will do that next time.\r\nI compile opencv this (GCC Undefined Behavior Sanitizer \xe2\x80\x93 [ubsan)](https://developers.redhat.com/blog/2014/10/16/gcc-undefined-behavior-sanitizer-ubsan/)\r\ncmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-fsanitize=address,undefined""\r\ncmake version 3.8.2\r\nso the integer overflow warning is printed, or else will cause unpredictable errors\r\n', b'got CVE-2017-12864', b""probably it's better to [link](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12864), not just writing down.\r\nnice work !""]",closed,2017-08-15 06:22:28,2017-08-22 16:35:47
https://api.github.com/repos/opencv/opencv/issues/6694,b'OpenCV 2.x uses vulnerable version of libpng',"[b'[opencv manager App on play store](https://play.google.com/store/apps/details?id=org.opencv.engine&hl=en) needs to be updated, too, [i guess](http://answers.opencv.org/question/98805/need-update-opencv-manager-apk-for-google-play-warning/)\n', b'OpenCV 2.4.x Android SDK has been updated:\r\nhttps://sourceforge.net/projects/opencvlibrary/files/opencv-android/2.4.13/\r\n', b'(@alalek) **This is not related to OpenCV and will not help with original problem**\r\n\r\n---\r\nhttps://github.com/sofensymbole/Libpng-1.6.23\r\n\r\nTry this link , it is created to remove vulnerability of libpng. app sucessfully uploaded by use of it. \r\n']",closed,2016-06-17 13:41:56,2016-07-01 10:32:29
https://api.github.com/repos/opencv/opencv/issues/5104,b'null pointer dereference openCV',"[b'thanks for the report, it can be reproduced as simple as:\n\n```\ncv::String s = """"; //empty\nsize_t pos = s.find_last_of(""x"");\n```\n\nthere seems to be a check for len_==0 missing here:\n\nhttps://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L938  / #L913\n', b""As I am the author of the tool, is there any way that I could adapt the tool so that it doesn't suffer from this problem anymore? Then I can include it in the next update.\n"", b'Hi, the fix is simple, before using the pointer, ensure that it is not equal to NULL here,\nhttps://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L942\n\nalso as @berak said, you need to check for len_==0 which is missing here:\nhttps://github.com/Itseez/opencv/blob/master/modules/core/include/opencv2/core/cvstd.hpp#L938 / #L913\n', b'Ow okay, then the fix is not directly inside the tool itself, but rather in functions it uses. Could you open up a PR with the fix?\n', b'Reply from CVE assignment team:\n\nWe do not agree that this is, in general, a NULL pointer dereference\nissue. The mistake that exists directly in the referenced source code\nis an attempt to assign the value of -1 to an unsigned integer (pos).\nThis causes pos to have a huge positive value. Then, ""i = cstr_ + pos""\ncauses i to be an invalid pointer, and *i is an invalid pointer\ndereference that causes a crash.\n\nHowever, the original problem might be elsewhere in the\nopencv_annotation source code. You are reporting that the value of\ncstr_ is 0x0. In that situation, find_last_of should not have been\ncalled at all, regardless of whether find_last_of was correctly\nimplemented. If cstr_ is 0x0, find_last_of would typically be\nsearching in memory locations that have small positive values (e.g.,\nmemory location 1), and this is obviously not useful. The original\nproblem that you discovered may be a cv::String object that\nunintentionally was constructed with 0x0 as both the len_ value and\nthe cstr_ value.\n\nThe ""berak"" example of:\n\n   cv::String s = """"; //empty\n\nmay help to illustrate the source-code problem; however, it is unclear\nwhether any possible use of the opencv_annotation program would result\nin a cv::String object where cstr_ was nonzero but len_ was zero.\n\nThus, we can divide this into two cases, A and B.\n\nA. Your discovery is a chain of issues in which:\n1. cstr_ is, for an unknown reason, equal to 0x0 but find_last_of is\n    called anyway\n2. because len_ is also 0x0, there is an incorrect attempt to associate -1\n    with an unsigned data type\n3. this later leads to an invalid pointer dereference\n\nUse CVE-2015-5710 to refer to the vulnerability defined by this chain\nof issues.\n\nB. The ""berak"" discovery shows a source-code error, but it is not\n   known whether this error is reachable during use of the\n   opencv_annotation program. Thus, the ""berak"" discovery does not\n   currently have a CVE ID. If there is future research that\n   identifies a call to find_last_of in which len_ is 0x0 but cstr_ is\n   not 0x0, then that case could have a different CVE ID.\n\n---\n\nCVE assignment team\n', b'once the String::find_last_of issue gets fixed, glob() tries to get smart, if given an empty folder string, and tries to search the current dir (""."") . it would still need a default for the txtfile.\n\n@StevenPuttemans , maybe you could use the CmdLineParser:\n\nhttps://gist.github.com/berak/53d1c0f1c67074168789\n\ndrawback is the different syntax: `annotate --images=some/path/ --annotation=my.txt`  (which is not very intuitive) , but at least this makes sure there\'s a valid folder and a sensible default for the textfile (also it won\'t get fooled by dummy params like in the issue above)\n\nlast, but not least, it might need checking the imread() output (there might be non-images in the path)\n', b'@alaamub @berak \nif I understand it correctly, the only time stuff like this is happening is when people supply wrong parameters? How does train_cascade or create_samples cope with that then? Because that seems to be identical.\n\nFor me, if this is pure the case of people needing to pay attention, then I am not really up to changing the complete interface. The syntax is now straightforward and identical for all tools.\n\nAs for\n--> checking the input, seems fair and reasonable\n--> checking if the path actually exists on the system can be done also\n\nWill apply those fixes asap!\n', b'As i mentioned in the post earlier, two issues need to be tackled here,\n1. cstr_ is, for an unknown reason, equal to 0x0 but find_last_of is called anyway (you may need to fix this)\n2. because len_ is also 0x0, there is an incorrect attempt to associate -1 with an unsigned data type (making len_ 0x0 makes the unsigned ""pos"" negative and that leads to the crash and this is something you need to fix) so check for the length first to avoid ""pos"" to be negative. and then check to see why cstr_ for an unknown reason is equal to 0x0. you can also implement the two things you mentioned (checking the input, checking if the path actually exists). thanks \n', b'Like you can see, I added checks for a correct input image read, the existance of the folder and the fact that the output stream is actually created or not. This for both 2.4 and master branch!\n', b'this should make it to work, once you release it i will test it again . thanks \n', b'All bugfixes seem processed, lets wait and see if it gets merged now :)\n', b'Both fixes were merged, so this can be closed down.\n', b'Thanks.\n']",closed,2015-07-31 17:56:48,2015-08-10 17:04:36
